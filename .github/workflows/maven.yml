
name: Java CI with Maven + Docker

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: employeedetails
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1234
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/employeedetails
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 1234

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven (skip tests)
        run: mvn clean package -Dspring.profiles.active=dev

      - name: Upload Surefire Test Results on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: target/surefire-reports

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.YOUR_SECRETE_NAME }}
          password: ${{ secrets.YOUR_SECRETE_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: jeeva10/employeemanagement:latest
      - name: List running containers
        run: docker ps -a
      - name: Print environment variables
        run: printenv | grep SPRING
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull jeeva10/employeemanagement:latest
            docker network inspect employee-network -f '{{range .Containers}}{{.Name}} {{end}}' | xargs -r docker stop && \
            docker network inspect employee-network -f '{{range .Containers}}{{.Name}} {{end}}' | xargs -r docker rm
  
            docker network create employee-network1
  
            docker stop employeedb || true
            docker rm employeedb || true
            docker run -d --name employeedb   --network employee-network1   -e POSTGRES_DB=employeedetails   -e POSTGRES_USER=postgres   -e POSTGRES_PASSWORD=1234   -p 5432:5432 postgres:15

            docker stop employeemanagement || true
            docker rm employeemanagement || true
            docker run -d --name employeemanagement --network employee-network1 \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://employeedb:5432/employeedetails \
            -e SPRING_DATASOURCE_USERNAME=postgres \
            -e SPRING_DATASOURCE_PASSWORD=1234 \
            -p 8070:8070 jeeva10/employeemanagement:latest



